package be.msec.government;

import java.io.File;
import java.io.FileInputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.net.Socket;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.security.KeyStore;
import java.security.PrivateKey;

import javax.net.ssl.SSLServerSocket;
import javax.net.ssl.SSLServerSocketFactory;
import javax.crypto.*;
import java.security.cert.Certificate;
import java.sql.Timestamp;

public class TimestampService {

	public static void main(String[] args) throws Exception {
		int ssPort = 440;
		
		SSLServerSocketFactory factory =  (SSLServerSocketFactory) SSLServerSocketFactory.getDefault();
		SSLServerSocket ssocket = (SSLServerSocket) factory.createServerSocket(ssPort);

		System.out.println("Working Directory = " +
	              System.getProperty("user.dir"));
		
		 String certificatePath = Paths.get(System.getProperty("user.dir")).getParent().toString() + File.pathSeparator + "Certificates" + File.pathSeparator; 
		
		while (true) {
			// accept new connection
			Socket socket = ssocket.accept();
			InputStream in = socket.getInputStream();
		    OutputStream out = socket.getOutputStream();
		    
		    // get certificate
            KeyStore keyStore = KeyStore.getInstance("JKS");
            String fileName = certificatePath + "government.jks";
            FileInputStream fis = new FileInputStream(fileName);
            keyStore.load(fis, "password".toCharArray());
            fis.close();

            PrivateKey pr = (PrivateKey) keyStore.getKey("government", "".toCharArray());

            String alg = "RSA";
            Cipher c;
            
            Timestamp timestamp = new Timestamp(System.currentTimeMillis());
            System.out.println("\nOriginal timestamp: \n" + timestamp);
         

            // encrypt
            c = Cipher.getInstance(alg);
            c.init(Cipher.ENCRYPT_MODE, pr);
            byte[] encrypted = c.doFinal(text.getBytes());
            System.out.println("\nEncrypted text: \n" + new String(encrypted));
		    
		    // close connection
		    in.close();
		    out.close();
		}
	}

}
