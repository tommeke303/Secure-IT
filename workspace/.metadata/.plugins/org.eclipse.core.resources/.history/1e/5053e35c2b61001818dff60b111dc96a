package be.msec.government.client;

import java.io.BufferedInputStream;
import java.io.BufferedReader;
import java.io.DataInputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.InputStreamReader;
import java.io.ObjectInputStream;
import java.io.OutputStream;
import java.io.PrintWriter;
import java.nio.file.Paths;
import java.security.KeyStore;
import java.security.PrivateKey;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;
import java.sql.Timestamp;
import java.util.ArrayList;
import java.util.Arrays;

import javax.crypto.Cipher;
import javax.net.ssl.SSLSocket;
import javax.net.ssl.SSLSocketFactory;

import com.sun.net.ssl.internal.ssl.Provider;

import be.msec.serviceProvider.tools.SPtools;
import javafx.util.Pair;

public class GVMTimestampClient {
	// network address
	private String Address = "localhost";
	private int Port = 1250;

	// find keystore
	private String keyStorePath = Paths.get(System.getProperty("user.dir")).getParent().toString() + File.separator
			+ "Certificates" + File.separator;
	private String ClientKeyStore = keyStorePath + "common.jks";
	private String ClientKeyPassword = "password";
	private String CertificateName = "government (ca)";
	
	/**
	 * Ask the government for a timestamp and have it already decrypted.
	 * 
	 * @return The timestamp from the government, already decrypted for you.
	 * @throws Exception If something went wrong.
	 */
	public Timestamp getTimestampDecrypted() throws Exception {
		// (6) & (9)
		Pair<byte[], Timestamp> raw = getTimestampRaw();

		// get certificate
		KeyStore keyStore = KeyStore.getInstance("JKS");
		FileInputStream fis = new FileInputStream(ClientKeyStore);
		keyStore.load(fis, ClientKeyPassword.toCharArray());
		fis.close();

		PublicKey pk = keyStore.getCertificate(CertificateName).getPublicKey();
		
		// prepare verification
		Signature sig = Signature.getInstance("SHA1WithRSA");
		sig.initVerify(pk);
        sig.update(SPtools.convertToBytes(raw.getValue()));
        
        sig.verify(raw.getKey());

		return raw.getValue();
	}

	/**
	 * Ask the government for a timestamp.
	 * 
	 * @return The timestamp from the government, encrypted with the private key of the government
	 * @throws Exception If something went wrong.
	 */
	@SuppressWarnings("unchecked")
	public Pair<byte[], Timestamp> getTimestampRaw() throws Exception {
		// set security properties
		Security.addProvider(new Provider());
		System.setProperty("javax.net.ssl.trustStore", ClientKeyStore);
		System.setProperty("javax.net.ssl.trustStorePassword", ClientKeyPassword);

		// optional: show details about handshake
		// System.setProperty("javax.net.debug", "all");

		SSLSocketFactory factory = (SSLSocketFactory) SSLSocketFactory.getDefault();
		
		// (6)
		SSLSocket socket = (SSLSocket) factory.createSocket(Address, Port);

		// (9)
		ObjectInputStream in = new ObjectInputStream(socket.getInputStream());
        Pair<byte[], Timestamp> result = (Pair<byte[], Timestamp>) in.readObject();
		
		// close connections
		in.close();
		

		
		return result;
	}
}
